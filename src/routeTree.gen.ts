/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UpdatesRouteImport } from './routes/updates'
import { Route as TransactionRouteImport } from './routes/transaction'
import { Route as TenantRentRouteImport } from './routes/tenant-rent'
import { Route as RetentionRouteImport } from './routes/retention'
import { Route as LoginRouteImport } from './routes/login'
import { Route as LeasingRouteImport } from './routes/leasing'
import { Route as IndexRouteImport } from './routes/index'

const UpdatesRoute = UpdatesRouteImport.update({
  id: '/updates',
  path: '/updates',
  getParentRoute: () => rootRouteImport,
} as any)
const TransactionRoute = TransactionRouteImport.update({
  id: '/transaction',
  path: '/transaction',
  getParentRoute: () => rootRouteImport,
} as any)
const TenantRentRoute = TenantRentRouteImport.update({
  id: '/tenant-rent',
  path: '/tenant-rent',
  getParentRoute: () => rootRouteImport,
} as any)
const RetentionRoute = RetentionRouteImport.update({
  id: '/retention',
  path: '/retention',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const LeasingRoute = LeasingRouteImport.update({
  id: '/leasing',
  path: '/leasing',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/leasing': typeof LeasingRoute
  '/login': typeof LoginRoute
  '/retention': typeof RetentionRoute
  '/tenant-rent': typeof TenantRentRoute
  '/transaction': typeof TransactionRoute
  '/updates': typeof UpdatesRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/leasing': typeof LeasingRoute
  '/login': typeof LoginRoute
  '/retention': typeof RetentionRoute
  '/tenant-rent': typeof TenantRentRoute
  '/transaction': typeof TransactionRoute
  '/updates': typeof UpdatesRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/leasing': typeof LeasingRoute
  '/login': typeof LoginRoute
  '/retention': typeof RetentionRoute
  '/tenant-rent': typeof TenantRentRoute
  '/transaction': typeof TransactionRoute
  '/updates': typeof UpdatesRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/leasing'
    | '/login'
    | '/retention'
    | '/tenant-rent'
    | '/transaction'
    | '/updates'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/leasing'
    | '/login'
    | '/retention'
    | '/tenant-rent'
    | '/transaction'
    | '/updates'
  id:
    | '__root__'
    | '/'
    | '/leasing'
    | '/login'
    | '/retention'
    | '/tenant-rent'
    | '/transaction'
    | '/updates'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LeasingRoute: typeof LeasingRoute
  LoginRoute: typeof LoginRoute
  RetentionRoute: typeof RetentionRoute
  TenantRentRoute: typeof TenantRentRoute
  TransactionRoute: typeof TransactionRoute
  UpdatesRoute: typeof UpdatesRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/updates': {
      id: '/updates'
      path: '/updates'
      fullPath: '/updates'
      preLoaderRoute: typeof UpdatesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/transaction': {
      id: '/transaction'
      path: '/transaction'
      fullPath: '/transaction'
      preLoaderRoute: typeof TransactionRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tenant-rent': {
      id: '/tenant-rent'
      path: '/tenant-rent'
      fullPath: '/tenant-rent'
      preLoaderRoute: typeof TenantRentRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/retention': {
      id: '/retention'
      path: '/retention'
      fullPath: '/retention'
      preLoaderRoute: typeof RetentionRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/leasing': {
      id: '/leasing'
      path: '/leasing'
      fullPath: '/leasing'
      preLoaderRoute: typeof LeasingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LeasingRoute: LeasingRoute,
  LoginRoute: LoginRoute,
  RetentionRoute: RetentionRoute,
  TenantRentRoute: TenantRentRoute,
  TransactionRoute: TransactionRoute,
  UpdatesRoute: UpdatesRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
